import 'dart:convert';
import 'package:http/http.dart' as http;

class ApiService {
  // Change this URL based on your deployment
  static const String _baseUrl = "http://10.0.2.2:8000"; // For Android emulator
  // static const String _baseUrl = "http://localhost:8000"; // For iOS simulator
  // static const String _baseUrl = "https://your-api-domain.com"; // For production

  static Future<Map<String, dynamic>?> predictImage(String imageUrl) async {
    final String apiUrl = "$_baseUrl/predict/";

    try {
      print("üîÑ Sending request to: $apiUrl");
      print("üì∑ Image URL: $imageUrl");

      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: json.encode({"image_url": imageUrl}),
      ).timeout(Duration(seconds: 30));

      print("üì° Response status: ${response.statusCode}");
      print("üìÑ Response body: ${response.body}");

      if (response.statusCode == 200) {
        final result = json.decode(response.body);
        return result;
      } else {
        print("‚ùå API Error: ${response.statusCode} - ${response.body}");
        return {
          "status": "error",
          "message": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (${response.statusCode})",
          "predicted_class": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          "confidence_score": "0%",
          "confidence_value": 0.0,
        };
      }
    } catch (e) {
      print("‚ùå Network Error: $e");
      return {
        "status": "error",
        "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e",
        "predicted_class": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ",
        "confidence_score": "0%",
        "confidence_value": 0.0,
      };
    }
  }

  static String formatPredictionResult(Map<String, dynamic> result) {
    final status = result['status'] ?? 'unknown';
    final predictedClass = result['predicted_class'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    final confidenceScore = result['confidence_score'] ?? '0%';
    final message = result['message'] ?? '';

    if (status == 'success') {
      final topPredictions = result['top_3_predictions'] as List<dynamic>? ?? [];
      
      String formattedResult = "üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n\n";
      formattedResult += "ü•á ‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: $predictedClass\n";
      formattedResult += "üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: $confidenceScore\n\n";
      
      if (topPredictions.length >= 3) {
        formattedResult += "üìã ‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô):\n";
        for (int i = 0; i < 3 && i < topPredictions.length; i++) {
          final prediction = topPredictions[i];
          final className = prediction['class'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
          final confidence = prediction['confidence'] ?? '0%';
          formattedResult += "${i + 1}. $className ($confidence)\n";
        }
      }
      
      formattedResult += "\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n";
      formattedResult += "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ\n";
      formattedResult += "‚Ä¢ ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢\n";
      formattedResult += "‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°";
      
      return formattedResult;
    } else if (status == 'low_confidence') {
      return "‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô\n\n"
          "üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: $confidenceScore\n\n"
          "üí≠ $message\n\n"
          "üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n"
          "‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\n"
          "‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£\n"
          "‚Ä¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á\n"
          "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏Å‡∏±‡∏™";
    } else {
      return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n\n"
          "$message\n\n"
          "üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n"
          "‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n"
          "‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á\n"
          "‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà";
    }
  }

  static Future<String> predictImageAndFormat(String imageUrl) async {
    final result = await predictImage(imageUrl);
    if (result != null) {
      return formatPredictionResult(result);
    } else {
      return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ\n\n"
          "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö";
    }
  }

  static double? extractConfidenceValue(Map<String, dynamic>? result) {
    if (result == null) return null;
    return result['confidence_value'] as double?;
  }

  static Future<bool> checkServerHealth() async {
    try {
      final response = await http.get(
        Uri.parse("$_baseUrl/health"),
        headers: {"Accept": "application/json"},
      ).timeout(Duration(seconds: 10));

      return response.statusCode == 200;
    } catch (e) {
      print("‚ùå Health check failed: $e");
      return false;
    }
  }
}
